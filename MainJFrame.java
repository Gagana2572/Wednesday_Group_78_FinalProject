/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinterface;

import Model.OrganizationsDirectory;
import Model.UserDirectory;
import java.awt.CardLayout;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import userinterface.CustomerServiceRepresentative.csrPanel;
import userinterface.StoreManager.StoreManagerJPanel;
import userinterface.customer.CustomerHomePanel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.BPOenterprise.bpoAdminPanel;
import userinterface.Delivery.deliveryAgentHomePanel;
import userinterface.DistributionEnterprise.distributionAdminPanel;
import userinterface.Farms.farmManagerPanel;
import userinterface.LogisticsEnterprise.logisticsAdminPanel;
import userinterface.Maps.mapsPanel;
import userinterface.MarketplaceEnterprise.marketplaceAdminPanel;
import userinterface.Shipping.shippingCompanyPanel;
import userinterface.Shipping.shippingHomePanel;
import userinterface.Supplier.supplierHomePanel;
import userinterface.SystemAdmin.SystemAdminJPanel;
import userinterface.Warehouse.WarehouseManagerHomeJPanel;
/**
 *
 * @author mahith
 */
/*Main Frame*/

public class MainJFrame extends javax.swing.JFrame {
        Connection connection;
        OrganizationsDirectory orgDir;
        UserDirectory userdir;
    
        public MainJFrame() {
        this.setUndecorated(true);
        initComponents();
        loginJPanel.setVisible(true);
        container.setVisible(false);
        leftPanel.setVisible(false);
        
        getRootPane().setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
        //databaseConnection();
        databaseConnection(connection);
        userdir  = new UserDirectory(connection);
        orgDir=new OrganizationsDirectory(connection);
    }
    
/**
     * Creates new form MainJFrame
     */
        public void databaseConnection(Connection connection1){
        System.out.println("Connection db");
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aed_project", "root", "Grayaru");//Establishing connection
            System.out.println("Connected With the database successfully"); //Message after successful connection 
        } catch (SQLException e) {
            System.out.println(e); //Message if something goes wrong while conneting to the database
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        logoutLabel = new javax.swing.JLabel();
        greetingUserLabel = new javax.swing.JLabel();
        backLabel = new javax.swing.JLabel();
        loginJPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        titleLabel1 = new javax.swing.JLabel();
        logoLabel = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        fldPassword = new javax.swing.JPasswordField();
        userNameSeperator = new javax.swing.JSeparator();
        passwordSeperator = new javax.swing.JSeparator();
        signInButtonPanel = new javax.swing.JPanel();
        signInLabel = new javax.swing.JLabel();
        forgotPassword = new javax.swing.JLabel();
        exitLabel = new javax.swing.JLabel();
        newUser = new javax.swing.JLabel();
        container = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        leftPanel.setBackground(new java.awt.Color(244, 242, 227));
        leftPanel.setMinimumSize(new java.awt.Dimension(1338, 60));
        leftPanel.setPreferredSize(new java.awt.Dimension(1338, 60));
        leftPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Shutdown.png"))); // NOI18N
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutLabelMousePressed(evt);
            }
        });
        leftPanel.add(logoutLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 0, 70, 60));

        greetingUserLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        leftPanel.add(greetingUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 690, 60));

        backLabel.setBackground(new java.awt.Color(227, 73, 78));
        backLabel.setForeground(new java.awt.Color(227, 73, 78));
        backLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Go Back.png"))); // NOI18N
        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backLabelMousePressed(evt);
            }
        });
        leftPanel.add(backLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 0, 60, 60));

        getContentPane().add(leftPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        loginJPanel.setBackground(new java.awt.Color(51, 0, 102));
        loginJPanel.setPreferredSize(new java.awt.Dimension(1338, 900));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(555, 840));

        titleLabel1.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        titleLabel1.setText("D E L I V E R - E A S E");

        logoLabel.setBackground(new java.awt.Color(0, 0, 0));
        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/DeliverEaseLogo.png")));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102)
                .addComponent(titleLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
        );

        txtUserName.setBackground(new java.awt.Color(204, 204, 255));
        txtUserName.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        txtUserName.setText("Username");
        txtUserName.setBorder(null);
        txtUserName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUserNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUserNameFocusLost(evt);
            }
        });
        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        fldPassword.setBackground(new java.awt.Color(204, 204, 255));
        fldPassword.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        fldPassword.setText("password");
        fldPassword.setBorder(null);
        fldPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fldPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fldPasswordFocusLost(evt);
            }
        });
        fldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldPasswordActionPerformed(evt);
            }
        });

        userNameSeperator.setForeground(new java.awt.Color(204, 204, 204));

        passwordSeperator.setForeground(new java.awt.Color(204, 204, 204));

        signInButtonPanel.setBackground(new java.awt.Color(204, 204, 255));
        signInButtonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        signInButtonPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signInButtonPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signInButtonPanelMouseClicked(evt);
            }
        });

        signInLabel.setBackground(new java.awt.Color(204, 204, 255));
        signInLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        signInLabel.setText("        Sign In");
        signInLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout signInButtonPanelLayout = new javax.swing.GroupLayout(signInButtonPanel);
        signInButtonPanel.setLayout(signInButtonPanelLayout);
        signInButtonPanelLayout.setHorizontalGroup(
            signInButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signInButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(signInLabel)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        signInButtonPanelLayout.setVerticalGroup(
            signInButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signInButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signInLabel)
                .addContainerGap())
        );

        forgotPassword.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        forgotPassword.setForeground(new java.awt.Color(204, 204, 204));
        forgotPassword.setText("Forgot Password?");
        forgotPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        forgotPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forgotPasswordMouseClicked(evt);
            }
        });

        exitLabel.setFont(new java.awt.Font("Arial Narrow", 1, 36)); // NOI18N
        exitLabel.setForeground(new java.awt.Color(204, 204, 255));
        exitLabel.setText("X");
        exitLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabelMouseClicked(evt);
            }
        });

        newUser.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        newUser.setForeground(new java.awt.Color(204, 204, 204));
        newUser.setText("New User ?? Sign Up !!");
        newUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newUserMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newUserMousePressed(evt);
            }
        });

        container.setBackground(new java.awt.Color(25, 56, 82));
        container.setForeground(new java.awt.Color(31, 50, 97));
        container.setPreferredSize(new java.awt.Dimension(1338, 840));
        container.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout loginJPanelLayout = new javax.swing.GroupLayout(loginJPanel);
        loginJPanel.setLayout(loginJPanelLayout);
        loginJPanelLayout.setHorizontalGroup(
            loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginJPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitLabel))
                    .addGroup(loginJPanelLayout.createSequentialGroup()
                        .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginJPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(passwordSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(fldPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(userNameSeperator)
                                            .addComponent(txtUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginJPanelLayout.createSequentialGroup()
                                        .addComponent(signInButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(loginJPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(forgotPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newUser, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );
        loginJPanelLayout.setVerticalGroup(
            loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitLabel)
                .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginJPanelLayout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userNameSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(signInButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(forgotPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(555, 555, 555))
                    .addGroup(loginJPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, 1048, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getContentPane().add(loginJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logoutLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMousePressed
        
    }//GEN-LAST:event_logoutLabelMousePressed

    private void backLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMousePressed
        // TODO add your handling code here:
        loginJPanel.setVisible(true);
        container.setVisible(false);
        leftPanel.setVisible(false);
        getRootPane().setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
    }//GEN-LAST:event_backLabelMousePressed

    private void txtUserNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserNameFocusGained
        // TODO add your handling code here:
        if(txtUserName.getText().equals("Username")){
            txtUserName.setText("");
        }

    }//GEN-LAST:event_txtUserNameFocusGained

    private void txtUserNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserNameFocusLost
        // TODO add your handling code here:
        if(txtUserName.getText().isBlank()){
            txtUserName.setText("Username");
        }
    }//GEN-LAST:event_txtUserNameFocusLost

    private void fldPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fldPasswordFocusGained
        // TODO add your handling code here:
        if(new String(fldPassword.getPassword()).equals("password")){
            fldPassword.setText("");
        }
    }//GEN-LAST:event_fldPasswordFocusGained

    private void fldPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fldPasswordFocusLost
        // TODO add your handling code here:
        if(new String(fldPassword.getPassword()).isBlank()){
            fldPassword.setText("password");
        }
    }//GEN-LAST:event_fldPasswordFocusLost

    private void fldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fldPasswordActionPerformed

    private void forgotPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotPasswordMouseClicked
        // TODO add your handling code here:
            forgotPasswordPanel panel = new forgotPasswordPanel();
            loginJPanel.setVisible(false);
            container.setVisible(true);
            leftPanel.setVisible(true);
            logoutLabel.setVisible(false);
            backLabel.setVisible(true);
            txtUserName.setText("");
            fldPassword.setText("");
        
            container.add("workArea", panel);
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
 

    }//GEN-LAST:event_forgotPasswordMouseClicked

    private void exitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabelMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitLabelMouseClicked

    /*Login Validation*/
    private boolean checkfield(){
    ArrayList msg=null;
    msg=new ArrayList();
    
    if(txtUserName.getText().isBlank())
        msg.add(("Please enter the correct User Name"));
    if(String.valueOf(fldPassword.getText()).isBlank())
        msg.add("Password field is empty");
     
    if(!(msg.isEmpty()))
        {JOptionPane.showMessageDialog(this, msg.toArray());
        msg.clear();
        return false;}
        else 
        return true;
    }
    
    
    private void signInButtonPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signInButtonPanelMouseClicked
        // TODO add your handling code here:
        
        try{ 
        if(checkfield()){
         /*BPO Admin Login*/   
          if(txtUserName.getText().equalsIgnoreCase("bpoadmin")){  
            PreparedStatement st = (PreparedStatement)connection.prepareStatement("select * from admins where username = ?");
            st.setString(1, txtUserName.getText());
            ResultSet rs = st.executeQuery();
            while(rs.next()){
                if((rs.getString(1).equalsIgnoreCase(txtUserName.getText())) && rs.getString(2).equals(String.valueOf(fldPassword.getPassword()))){
                      
                    JOptionPane.showMessageDialog(this, "BPO Admin Login Successful..!!");
                        bpoAdminPanel panel = new bpoAdminPanel(connection);
                        container.add("BPO Admin work Area", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                       
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
            
          }
          
          /*Distribution Admin Login*/
          else if(txtUserName.getText().equalsIgnoreCase("dadmin")){  
            PreparedStatement preparedStatement =connection.prepareStatement("select * from admins where username=?");
            preparedStatement.setString(1, "dadmin");
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                if((rs.getString(1).equalsIgnoreCase(txtUserName.getText())) && rs.getString(2).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Distribution Admin Login Successful..!!");
                        distributionAdminPanel panel = new distributionAdminPanel(connection);
                        container.add("Distribution admin", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
        
          }
          
          /*Logistics Admin Login */
          else if(txtUserName.getText().equalsIgnoreCase("ladmin")){  
            PreparedStatement preparedStatement =connection.prepareStatement("select * from admins where username=?");
            preparedStatement.setString(1, "ladmin");
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                if((rs.getString(1).equalsIgnoreCase(txtUserName.getText())) && rs.getString(2).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Logistics Admin Login Successful..!!");
                        logisticsAdminPanel panel = new logisticsAdminPanel(connection);
                        container.add("Logistics Admin", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
        
          }
          
          
         /*Market Place Admin Login*/
          else if(txtUserName.getText().equalsIgnoreCase("madmin")){  
            PreparedStatement preparedStatement =connection.prepareStatement("select * from admins where username=?");
            preparedStatement.setString(1, "madmin");
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                if((rs.getString(1).equalsIgnoreCase(txtUserName.getText())) && rs.getString(2).equals(String.valueOf(fldPassword.getPassword()))){
                    JOptionPane.showMessageDialog(this, "Market Place Admin Login Successful..!!");
                        marketplaceAdminPanel panel = new marketplaceAdminPanel(connection);
                        container.add("marketplace admin", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
         
          }
          
          /*System Admin Login*/
          else if(txtUserName.getText().equalsIgnoreCase("sadmin")){  
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from admins where username=?");
            preparedStatement.setString(1, "sadmin");
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                if((rs.getString(1).equalsIgnoreCase(txtUserName.getText())) && rs.getString(2).equals(String.valueOf(fldPassword.getPassword()))){
                    JOptionPane.showMessageDialog(this, "System Admin Login Successful..!!");
                        SystemAdminJPanel sysadmin = new SystemAdminJPanel(connection,userdir,orgDir);
                        container.add("sys admin", sysadmin);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
        
          }
          
         /*Store Manager Login*/ 
          else if (txtUserName.getText().contains("storemanager")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from store_manager where ManagerUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(5).equalsIgnoreCase(txtUserName.getText())) && rs.getString(6).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Store Manager Login Successful..!!");
                        StoreManagerJPanel panel = new StoreManagerJPanel(connection, txtUserName.getText());
                        container.add("store manager", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
                
          }
          
          /*warehouse Manager*/
          else if (txtUserName.getText().contains("warehousemanager")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from warehouse_manager where ManagerUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(5).equalsIgnoreCase(txtUserName.getText())) && rs.getString(6).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Warehouse Manager Login Successful..!!");
                        WarehouseManagerHomeJPanel panel = new WarehouseManagerHomeJPanel(connection);
                        container.add("warehouse admin", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
              
            
          }
          /*farm Manager*/
//          else if (txtUserName.getText().contains("farmmanager")){
//            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from store_manager where ManagerUserName=?");
//            preparedStatement.setString(1, txtUserName.getText());
//            ResultSet rs = preparedStatement.executeQuery(); 
//            while(rs.next()){
//              if((rs.getString(5).equalsIgnoreCase(txtUserName.getText())) && rs.getString(6).equals(String.valueOf(fldPassword.getPassword()))){
//                        JOptionPane.showMessageDialog(this, "Store Manager Login Successful..!!");
//                        farmManagerPanel panel = new farmManagerPanel(connection);
//                        container.add("farm manager", panel);
//                        CardLayout layout = (CardLayout) container.getLayout();
//                        layout.next(container);
//                }
//            }
//            
//            loginJPanel.setVisible(false);
//            container.setVisible(true);
//            leftPanel.setVisible(true);
//            logoutLabel.setVisible(false);
//            backLabel.setVisible(true);
//            txtUserName.setText("");
//            fldPassword.setText(""); 
//          }
          
          /*Customer Login*/
          else if (txtUserName.getText().contains("user")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from customer where CustomerUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(3).equalsIgnoreCase(txtUserName.getText())) && rs.getString(5).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Customer Login Successful..!!");
                        CustomerHomePanel panel = new CustomerHomePanel(connection);
                        container.add("customer", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
             
          }
          
          /*Suppplier Login*/
          else if (txtUserName.getText().contains("supplier")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from supplier where SupplierUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(5).equalsIgnoreCase(txtUserName.getText())) && rs.getString(6).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Supplier Login Successful..!!");
                        supplierHomePanel panel = new supplierHomePanel(connection);
                        container.add("supplier", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
             
          }
          else if (txtUserName.getText().contains("supplier")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from supplier where SupplierUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(5).equalsIgnoreCase(txtUserName.getText())) && rs.getString(6).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Supplier Login Successful..!!");
                        supplierHomePanel panel = new supplierHomePanel(connection);
                        container.add("supplier", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
             
          }
          
          /*CSR Login*/
          else if (txtUserName.getText().contains("shippingagent")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from shipping_agent where AgentUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(4).equalsIgnoreCase(txtUserName.getText())) && rs.getString(5).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "shipping agent Successful..!!");
                        shippingCompanyPanel panel = new shippingCompanyPanel(connection);
                        container.add("shipping", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
             
          }
          
         /*SSR Login*/
          else if (txtUserName.getText().contains("csr")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from csr where CSREmail=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(3).equalsIgnoreCase(txtUserName.getText())) && rs.getString(4).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "CSR Login Successful..!!");
                        csrPanel panel = new csrPanel(connection);
                        container.add("supplier", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
             
          }
          
          /*Delivery Agent*/  
          else if (txtUserName.getText().contains("deliveryagent")){
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement("select * from delivery_agent where AgentUserName=?");
            preparedStatement.setString(1, txtUserName.getText());
            ResultSet rs = preparedStatement.executeQuery(); 
            while(rs.next()){
              if((rs.getString(5).equalsIgnoreCase(txtUserName.getText())) && rs.getString(6).equals(String.valueOf(fldPassword.getPassword()))){
                        JOptionPane.showMessageDialog(this, "Delivery Agent Login Successful..!!");
                        deliveryAgentHomePanel panel = new deliveryAgentHomePanel(connection);
                        container.add("supplier", panel);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);
                        
                        loginJPanel.setVisible(false);
                        container.setVisible(true);
                        leftPanel.setVisible(true);
                        logoutLabel.setVisible(false);
                        backLabel.setVisible(true);
                        txtUserName.setText("");
                        fldPassword.setText("");
                }else{
                    JOptionPane.showMessageDialog(this, "Please check your credentials..!!");

                }
            }
            
             
          }  
          
          else{
            JOptionPane.showMessageDialog(this, "No Active User found for the Credentials"+" :( :(");
          }
        }
        else {/*JOptionPane.showMessageDialog(this, "Please Enter Valid Credentials..!!");*/}
 
        }
        catch(SQLException e){
            System.out.println("Error while retrieving data  "+e);
        }  
        
    }//GEN-LAST:event_signInButtonPanelMouseClicked

    private void newUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newUserMouseClicked
        // TODO add your handling code here:  
        
        loginJPanel.setVisible(false);
            container.setVisible(true);
            leftPanel.setVisible(true);
            logoutLabel.setVisible(false);
            backLabel.setVisible(true);
            txtUserName.setText("");
            fldPassword.setText("");
          signupPanel signUp = new signupPanel(connection,userdir);
          container.add("sign up", signUp);
          CardLayout layout = (CardLayout) container.getLayout();
          layout.next(container);
        
    }//GEN-LAST:event_newUserMouseClicked

    private void newUserMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newUserMousePressed
    
    }//GEN-LAST:event_newUserMousePressed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
   
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel backLabel;
    public javax.swing.JPanel container;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JPasswordField fldPassword;
    private javax.swing.JLabel forgotPassword;
    private javax.swing.JLabel greetingUserLabel;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JPanel leftPanel;
    public javax.swing.JPanel loginJPanel;
    private javax.swing.JLabel logoLabel;
    public javax.swing.JLabel logoutLabel;
    private javax.swing.JLabel newUser;
    private javax.swing.JSeparator passwordSeperator;
    private javax.swing.JPanel signInButtonPanel;
    private javax.swing.JLabel signInLabel;
    private javax.swing.JLabel titleLabel1;
    public javax.swing.JTextField txtUserName;
    private javax.swing.JSeparator userNameSeperator;
    // End of variables declaration//GEN-END:variables
}
